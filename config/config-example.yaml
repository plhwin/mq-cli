# Ticker 服务redis
redis:
  addr: "127.0.0.1:6379"
  password: ""
  db: 0
  channel:
    tickerOutput: "NTBridgeTicker:ticks"
  hset:
    latestTicks: "NTBridgeTicker:LatestTicks" # 最新MT资产报价
    latestTicksFix: "NTBridgeTicker:LatestFixTicks" # 最新Fix(流动性资产)报价
# Fix报价服务产出的redis
redisFix:
  addr: "127.0.0.1:6379"
  password: ""
  db: 0
  channel:
    fixInput: "NTBridgeFix:Quotes"
unifeeder:
  listenAddr: ":3333"
  login: ""
  password: ""
thrift:
  listenAddr: ":7003"
quoteFix:
  spreadScale: 0.1 # 基准点差波动比例
  spreadMul: 2.0 # 实际点差值超出基准点差值多少倍时，策略失效（不再执行调整策略）, 设定值必须大于1
  priceTTL: 5000 # 单位：毫秒，0=关闭，报价有效生存时间，如果从FIX队列接收到该报价时差超过该值，则直接丢弃该报价
debug:
  logTime: 1000 # 报价时间超过多少毫秒时，开启日志记录，0=全部，-1=关闭
  mt4Symbol: "" # debug哪个MT4 symbol
  notMatchLiquidity: false # 报价的流动性与资产配置流动性不匹配时，是否打印日志
  symbolClosed: false # 当MT资产设置为关闭，是否打印日志
  notInSecurities: false # 当rds.Securities这个Map找不到指定key(tickFix.Liquidity + tickFix.Security)数据时，是否打印日志
  notInFamilySymbols: false # 当rds.FamilySymbols这个Map找不到指定key(security.Family)数据时，是否打印日志
  logNegative: false # 报价出现市场深度为负的情况时，是否打印详情
  logQuoteMerge: false # 是否打印合并市场深度的详情
  spreadBase: false # 是否打印Fix报价基准点差处理详情
  tickFilter: false # 是否打印报价过滤器处理详情
filter:
  open: true # 报价过滤器总开关
  priceTTL: 3600 # 单位：秒，0=关闭，参与比较或计算报价的有效生存时间，无论是当前报价与上一次基准报价比较，或者是当前报价与参考资产的报价比较取最优价，都需要它们的报价时间满足这个有效生存时间，避免价格久未更新产生问题
rocketmq:
  open: true
  nameServers: "0.0.0.0:49876"
  credentials:
    accessKey: ""
    secretKey: ""
  consumer:
    topic: "FixQuotes"
    group: "GID_Ticker"
    model: "Clustering" # BroadCasting Clustering
    fromWhere: "LastOffset" # FirstOffset LastOffset Timestamp
    order: true
  producer:
    topic: "Ticks"
    group: "GID_PD_Ticker"
    retries: 0
    vipChannel: false
